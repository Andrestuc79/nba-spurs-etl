{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2025-08-19T22:17:31.447634Z", "invocation_id": "dfc9402d-b606-4e5b-b085-403885a35e23", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T22:17:30.114131Z", "completed_at": "2025-08-19T22:17:30.144676Z"}, {"name": "execute", "started_at": "2025-08-19T22:17:30.147809Z", "completed_at": "2025-08-19T22:17:30.373378Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2658677101135254, "adapter_response": {"_message": "SELECT 58", "code": "SELECT", "rows_affected": 58}, "message": "SELECT 58", "failures": null, "unique_id": "model.spurs_dbt.home_vs_away", "compiled": true, "compiled_code": "\nWITH nba_games AS (\n    SELECT\n        t1.*,t2.full_name AS team_name2\n    FROM \"nba\".\"silver\".\"games\" AS t1\n    INNER JOIN \"nba\".\"silver\".\"teams\" AS t2\n        ON t1.team_id = t2.id\n),\n\n\nbase as (\n  select\n    case when season like '2024' then '2024-25'\n         else season end as season,\n    team_name2 as team_name,     \n    case\n      when matchup like '%@%' then 'Away'\n      else 'Home'\n    end as location,\n    wl,\n    pts::int as pts\n  from nba_games\n)\n\nselect\n  season,\n  team_name,\n  location,\n  count(*) as games,\n  sum(case when wl = 'W' then 1 else 0 end) as wins,\n  sum(case when wl = 'L' then 1 else 0 end) as losses,\n  round(avg(pts), 2) as avg_points\nfrom base\ngroup by season,team_name,location\norder by season, location,wins desc", "relation_name": "\"nba\".\"gold\".\"home_vs_away\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T22:17:30.387016Z", "completed_at": "2025-08-19T22:17:30.410087Z"}, {"name": "execute", "started_at": "2025-08-19T22:17:30.412971Z", "completed_at": "2025-08-19T22:17:30.550600Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.16972780227661133, "adapter_response": {"_message": "SELECT 238", "code": "SELECT", "rows_affected": 238}, "message": "SELECT 238", "failures": null, "unique_id": "model.spurs_dbt.spurs_player_contributions_unpivoted", "compiled": true, "compiled_code": "\n\nWITH source_data AS (\n\n    -- Usamos `source` si tienes la tabla definida en tu `sources.yml`,\n    -- o la referenciamos directamente si es un modelo intermedio.\n    -- Reemplaza `your_source_name` y `your_table_name` con los nombres correctos.\n    SELECT\n    player_id,\n    player_name,\n    team_abbreviation,\n    AVG(fg_pct::numeric) AS avg_fg_pct,\n    AVG(fg3_pct::numeric) AS avg_fg3_pct,\n    AVG(reb::numeric) AS avg_reb,\n    AVG(tov::numeric) AS avg_tov,\n    AVG(stl::numeric) AS avg_stl,\n    AVG(blk::numeric) AS avg_blk,\n    AVG(plus_minus::numeric) AS avg_plus_minus\nfrom \nsilver.player_stats\nwhere team_abbreviation = 'SAS'\nGROUP BY player_id, player_name, team_abbreviation\n),\n\n\nunpivoted_contribucion AS (\n    SELECT\n        ss.player_id,\n        ss.player_name,\n        'Porcentaje de tiro de campo' AS rubro,\n        ss.avg_fg_pct AS valor\n    FROM source_data ss\n    \n    UNION ALL\n\n    SELECT\n        ss.player_id,\n        ss.player_name,\n        'Porcentaje de tres' AS rubro,\n        ss.avg_fg3_pct as valor\n    FROM source_data ss\n  \n    UNION ALL\n\n    SELECT\n        ss.player_id,\n        ss.player_name,\n        'P\u00e9rdidas de bal\u00f3n' AS rubro,\n        ss.avg_tov as valor\n    FROM source_data ss\n   \n    UNION ALL\n\n    SELECT\n        ss.player_id,\n        ss.player_name,\n        'Rebotes' AS rubro,\n        ss.avg_reb as valor\n    FROM source_data ss\n  \n    UNION ALL\n\n    SELECT\n        ss.player_id,\n        ss.player_name,\n        'Robos' AS rubro,\n        ss.avg_stl as valor\n    FROM source_data ss\n   \n    UNION ALL\n\n    SELECT\n        ss.player_id,\n        ss.player_name,\n        'Bloqueos' AS rubro,\n        ss.avg_blk as valor\n    FROM source_data ss\n  \n    UNION ALL\n\n    SELECT\n        ss.player_id,\n        ss.player_name,\n        'Diferencial Puntos' AS rubro,\n        ss.avg_plus_minus as valor\n    FROM source_data ss\n    \n)\n\nSELECT * FROM unpivoted_contribucion", "relation_name": "\"nba\".\"gold\".\"spurs_player_contributions_unpivoted\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T22:17:30.563733Z", "completed_at": "2025-08-19T22:17:30.589918Z"}, {"name": "execute", "started_at": "2025-08-19T22:17:30.592247Z", "completed_at": "2025-08-19T22:17:30.697705Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14031577110290527, "adapter_response": {"_message": "SELECT 1", "code": "SELECT", "rows_affected": 1}, "message": "SELECT 1", "failures": null, "unique_id": "model.spurs_dbt.streaks_and_rivals", "compiled": true, "compiled_code": "\n\nWITH spurs_games AS (\n    SELECT\n        case when season like '2024' then '2024-25'\n         else season end as season,\n        game_date,\n        matchup,\n        plus_minus,\n        CASE \n            WHEN wl = 'W' THEN 1 \n            ELSE 0 \n        END AS is_win,\n        CASE \n            WHEN wl = 'L' THEN 1 \n            ELSE 0 \n        END AS is_loss\n    FROM \"nba\".\"silver\".\"games\"\n    WHERE team_abbreviation = 'SAS'\n),\n\nwinning_streaks AS (\n    SELECT\n        *,\n        SUM(is_loss) OVER (ORDER BY game_date) AS loss_group\n    FROM spurs_games\n),\n\nlosing_streaks AS (\n    SELECT\n        *,\n        SUM(is_win) OVER (ORDER BY game_date) AS win_group\n    FROM spurs_games\n),\n\nbest_winning_streak AS (\n    SELECT\n        season,\n        COUNT(*) AS streak_length\n    FROM winning_streaks\n    WHERE is_win = 1\n    GROUP BY season, loss_group\n    ORDER BY streak_length DESC\n    LIMIT 1\n),\n\nworst_losing_streak AS (\n    SELECT\n        season,\n        COUNT(*) AS streak_length\n    FROM losing_streaks\n    WHERE is_loss = 1\n    GROUP BY season, win_group\n    ORDER BY streak_length DESC\n    LIMIT 1\n),\n\nbiggest_win AS (\n    SELECT\n        season,\n        -- Extrae el nombre del oponente de la columna 'matchup'\n        CASE\n            WHEN matchup LIKE '%vs.%' THEN SPLIT_PART(matchup, 'vs. ', 2)\n            WHEN matchup LIKE '%@%' THEN SPLIT_PART(matchup, '@ ', 2)\n            ELSE matchup\n        END AS opponent,\n        plus_minus AS point_differential\n    FROM spurs_games\n    WHERE plus_minus = (SELECT MAX(plus_minus) FROM spurs_games)\n    ORDER BY point_differential DESC\n    LIMIT 1\n),\n\nbiggest_loss AS (\n    SELECT\n        season,\n        -- Extrae el nombre del oponente de la columna 'matchup'\n        CASE\n            WHEN matchup LIKE '%vs.%' THEN SPLIT_PART(matchup, 'vs. ', 2)\n            WHEN matchup LIKE '%@%' THEN SPLIT_PART(matchup, '@ ', 2)\n            ELSE matchup\n        END AS opponent,\n        plus_minus AS point_differential\n    FROM spurs_games\n    WHERE plus_minus = (SELECT MIN(plus_minus) FROM spurs_games)\n    ORDER BY point_differential ASC\n    LIMIT 1\n)\n\n-- Consulta final que une todas las m\u00e9tricas en una sola fila\nSELECT\n    (SELECT season FROM best_winning_streak) AS best_winning_streak_season,\n    (SELECT streak_length FROM best_winning_streak) AS best_winning_streak_length,\n    (SELECT season FROM worst_losing_streak) AS worst_losing_streak_season,\n    (SELECT streak_length FROM worst_losing_streak) AS worst_losing_streak_length,\n    (SELECT season FROM biggest_win) AS biggest_win_season,\n    (SELECT opponent FROM biggest_win) AS team_beat_by_most,\n    (SELECT point_differential FROM biggest_win) AS biggest_win_margin,\n    (SELECT season FROM biggest_loss) AS biggest_loss_season,\n    (SELECT opponent FROM biggest_loss) AS team_lost_to_by_most,\n    (SELECT point_differential FROM biggest_loss) AS biggest_loss_margin", "relation_name": "\"nba\".\"gold\".\"streaks_and_rivals\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T22:17:30.710333Z", "completed_at": "2025-08-19T22:17:30.734130Z"}, {"name": "execute", "started_at": "2025-08-19T22:17:30.736259Z", "completed_at": "2025-08-19T22:17:30.840257Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13585543632507324, "adapter_response": {"_message": "SELECT 29", "code": "SELECT", "rows_affected": 29}, "message": "SELECT 29", "failures": null, "unique_id": "model.spurs_dbt.summary_by_season", "compiled": true, "compiled_code": "\n\nWITH nba_games AS (\n    SELECT\n        t1.*\n    FROM \"nba\".\"silver\".\"games\" AS t1\n    INNER JOIN \"nba\".\"silver\".\"teams\" AS t2\n        ON t1.team_id = t2.id\n),\n\nbase as (\n  select\n    case when season like '2024' then '2024-25'\n        else season end as season,\n    team_name,\n    wl,\n    pts::int as pts\n  from nba_games\n  \n),\n\nsumariza as (select\n  season,\n  team_name,\n  count(*) as total_games,\n  sum(case when wl = 'W' then 1 else 0 end) as wins,\n  sum(case when wl = 'L' then 1 else 0 end) as losses,\n  round(avg(pts), 2) as avg_points\nfrom base\ngroup by season,team_name\norder by season,wins desc)\n\n \n  SELECT\n    t1.season,\n    t1.team_name,\n    t1.wins,\n    t1.losses,\n    t1.total_games,\n    t1.avg_points,\n    DENSE_RANK() OVER (PARTITION BY t1.season ORDER BY t1.wins DESC, t1.losses ASC,t1.avg_points desc) AS team_ranking\nfrom sumariza t1", "relation_name": "\"nba\".\"gold\".\"summary_by_season\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T22:17:30.856100Z", "completed_at": "2025-08-19T22:17:30.881912Z"}, {"name": "execute", "started_at": "2025-08-19T22:17:30.884286Z", "completed_at": "2025-08-19T22:17:31.097041Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.24654698371887207, "adapter_response": {"_message": "SELECT 7", "code": "SELECT", "rows_affected": 7}, "message": "SELECT 7", "failures": null, "unique_id": "model.spurs_dbt.team_weaknesses_unpivoted", "compiled": true, "compiled_code": "\n\nWITH spurs_stats AS (\n    SELECT\n        case when season like '2024' then '2024-25'\n            else season end as season2,\n        AVG(fg_pct::numeric) AS avg_fg_pct,\n        AVG(fg3_pct::numeric) AS avg_fg3_pct,\n        AVG(tov::numeric) AS avg_turnovers,\n        AVG(reb::numeric) AS avg_rebounds,\n        AVG(blk::numeric) AS avg_blocks,\n        AVG(stl::numeric) AS avg_steals,\n        AVG(plus_minus::numeric) AS avg_plus_minus\n    FROM \"nba\".\"silver\".\"games\"\n    WHERE team_name = 'San Antonio Spurs'\n    GROUP BY season2\n),\n\nteam_averages AS (\n    SELECT\n        case when t1.season like '2024' then '2024-25'\n            else t1.season end as season2,\n        AVG(t1.fg_pct::numeric) AS avg_league_fg_pct,\n        AVG(t1.fg3_pct::numeric) AS avg_league_fg3_pct,\n        AVG(t1.tov::numeric) AS avg_league_turnovers,\n        AVG(t1.reb::numeric) AS avg_league_rebounds,\n        AVG(t1.blk::numeric) AS avg_league_blocks,\n        AVG(t1.stl::numeric) AS avg_league_steals,\n        AVG(t1.plus_minus::numeric) AS avg_league_plus_minus\n    FROM \"nba\".\"silver\".\"games\" t1\n    INNER JOIN \"nba\".\"silver\".\"teams\" AS t2\n        ON t1.team_id = t2.id\n    GROUP BY season2\n),\n\nbest_team_stats AS (\n    SELECT\n        season2 AS season2,\n        MAX(avg_fg_pct) AS best_team_avg_fg_pct,\n        MAX(avg_fg3_pct) AS best_team_avg_fg3_pct,\n        MIN(avg_turnovers) AS best_team_avg_turnovers, -- Menos p\u00e9rdidas es mejor\n        MAX(avg_reb) AS best_team_avg_rebounds,\n        MAX(avg_blk) AS best_team_avg_blocks,\n        MAX(avg_stl) AS best_team_avg_steals,\n        MAX(avg_plus_minus) AS best_team_avg_plus_minus\n    FROM (\n        SELECT\n            case when t1.season like '2024' then '2024-25'\n            else t1.season end as season2,\n            t1.team_name,\n            AVG(t1.fg_pct::numeric) AS avg_fg_pct,\n            AVG(t1.fg3_pct::numeric) AS avg_fg3_pct,\n            AVG(t1.tov::numeric) AS avg_turnovers,\n            AVG(t1.reb::numeric) AS avg_reb,\n            AVG(t1.blk::numeric) AS avg_blk,\n            AVG(t1.stl::numeric) AS avg_stl,\n            AVG(t1.plus_minus::numeric) AS avg_plus_minus\n        FROM \"nba\".\"silver\".\"games\" t1\n        INNER JOIN \"nba\".\"silver\".\"teams\" AS t2\n            ON t1.team_id = t2.id\n        GROUP BY season2, team_name\n    ) AS all_teams\n    GROUP BY season2\n),\n\nunpivoted_weaknesses AS (\n    SELECT\n        ss.season2,\n        'Porcentaje de tiro de campo' AS weakness_type,\n        ss.avg_fg_pct AS valor_equipo,\n        ta.avg_league_fg_pct AS valor_liga,\n        bts.best_team_avg_fg_pct AS valor_mejor_equipo,\n        case when ss.avg_fg_pct < ta.avg_league_fg_pct then 'Debilidad' else 'Fortaleza' end AS Resultado\n    FROM spurs_stats ss\n    JOIN team_averages ta ON ss.season2 = ta.season2\n    JOIN best_team_stats bts ON ss.season2 = bts.season2\n    \n    UNION ALL\n\n    SELECT\n        ss.season2,\n        'Porcentaje de tres' AS weakness_type,\n        ss.avg_fg3_pct,\n        ta.avg_league_fg3_pct,\n        bts.best_team_avg_fg3_pct,\n        case when ss.avg_fg3_pct < ta.avg_league_fg3_pct then 'Debilidad' else 'Fortaleza' end AS Resultado\n    FROM spurs_stats ss\n    JOIN team_averages ta ON ss.season2 = ta.season2\n    JOIN best_team_stats bts ON ss.season2 = bts.season2\n\n    UNION ALL\n\n    SELECT\n        ss.season2,\n        'P\u00e9rdidas de bal\u00f3n' AS weakness_type,\n        ss.avg_turnovers,\n        ta.avg_league_turnovers,\n        bts.best_team_avg_turnovers,\n        case when ss.avg_turnovers > ta.avg_league_turnovers then 'Debilidad' else 'Fortaleza' end AS Resultado\n    FROM spurs_stats ss\n    JOIN team_averages ta ON ss.season2 = ta.season2\n    JOIN best_team_stats bts ON ss.season2 = bts.season2\n\n    UNION ALL\n\n    SELECT\n        ss.season2,\n        'Rebotes' AS weakness_type,\n        ss.avg_rebounds,\n        ta.avg_league_rebounds,\n        bts.best_team_avg_rebounds,\n        case when ss.avg_rebounds < ta.avg_league_rebounds then 'Debilidad' else 'Fortaleza' end AS Resultado\n    FROM spurs_stats ss\n    JOIN team_averages ta ON ss.season2 = ta.season2\n    JOIN best_team_stats bts ON ss.season2 = bts.season2\n\n    UNION ALL\n\n    SELECT\n        ss.season2,\n        'Robos' AS weakness_type,\n        ss.avg_steals,\n        ta.avg_league_steals,\n        bts.best_team_avg_steals,\n        case when ss.avg_steals < ta.avg_league_steals then 'Debilidad' else 'Fortaleza' end AS Resultado\n    FROM spurs_stats ss\n    JOIN team_averages ta ON ss.season2 = ta.season2\n    JOIN best_team_stats bts ON ss.season2 = bts.season2\n\n    UNION ALL\n\n    SELECT\n        ss.season2,\n        'Bloqueos' AS weakness_type,\n        ss.avg_blocks,\n        ta.avg_league_blocks,\n        bts.best_team_avg_blocks,\n        case when ss.avg_blocks < ta.avg_league_blocks then 'Debilidad' else 'Fortaleza' end AS Resultado\n    FROM spurs_stats ss\n    JOIN team_averages ta ON ss.season2 = ta.season2\n    JOIN best_team_stats bts ON ss.season2 = bts.season2\n\n    UNION ALL\n\n    SELECT\n        ss.season2,\n        'Diferencial Puntos' AS weakness_type,\n        ss.avg_plus_minus,\n        ta.avg_league_plus_minus,\n        bts.best_team_avg_plus_minus,\n        case when ss.avg_plus_minus < ta.avg_league_plus_minus then 'Debilidad' else 'Fortaleza' end AS Resultado\n    FROM spurs_stats ss\n    JOIN team_averages ta ON ss.season2 = ta.season2\n    JOIN best_team_stats bts ON ss.season2 = bts.season2\n)\n\nSELECT\n    season2,\n    weakness_type,\n    valor_equipo,\n    valor_liga,\n    valor_mejor_equipo,\n    resultado\nFROM unpivoted_weaknesses\nORDER BY season2, weakness_type", "relation_name": "\"nba\".\"gold\".\"team_weaknesses_unpivoted\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-08-19T22:17:31.111096Z", "completed_at": "2025-08-19T22:17:31.134944Z"}, {"name": "execute", "started_at": "2025-08-19T22:17:31.137701Z", "completed_at": "2025-08-19T22:17:31.421577Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3158297538757324, "adapter_response": {"_message": "SELECT 15", "code": "SELECT", "rows_affected": 15}, "message": "SELECT 15", "failures": null, "unique_id": "model.spurs_dbt.players_recommendations", "compiled": true, "compiled_code": "\n\nWITH spurs_weaknesses_unpivoted AS (\n    SELECT\n        season2,\n        weakness_type\n    FROM \"nba\".\"gold\".\"team_weaknesses_unpivoted\"\n    WHERE Resultado = 'Debilidad'\n),\n\nranked_free_agents AS (\n  SELECT\n        p.player_id,\n        p.player AS player_name,\n        p.position,\n        CASE WHEN fa.player_id IS NOT NULL THEN TRUE ELSE FALSE END AS is_free_agent,\n        CASE WHEN i.player_id IS NOT NULL THEN TRUE ELSE FALSE END AS is_injured,\n        s.salary_usd::numeric AS salary,\n        pgs.avg_fg_pct,\n        pgs.avg_fg3_pct,\n        pgs.avg_reb,\n        pgs.avg_tov,\n        pgs.avg_plus_minus,\n        pgs.avg_stl,\n        pgs.avg_blk,\n        ROW_NUMBER() OVER (ORDER BY pgs.avg_fg_pct DESC) AS rank_fg,\n        ROW_NUMBER() OVER (ORDER BY pgs.avg_fg3_pct DESC) AS rank_fg3,\n        ROW_NUMBER() OVER (ORDER BY pgs.avg_reb DESC) AS rank_reb,\n        ROW_NUMBER() OVER (ORDER BY pgs.avg_tov ASC) AS rank_tov,\n        ROW_NUMBER() OVER (ORDER BY pgs.avg_stl DESC) AS rank_stl,\n        ROW_NUMBER() OVER (ORDER BY pgs.avg_blk DESC) AS rank_blk,\n        ROW_NUMBER() OVER (ORDER BY pgs.avg_plus_minus DESC) AS rank_plus_minus\n    FROM (select distinct player_id,player,position from \"nba\".\"silver\".\"players\") AS p\n    JOIN (SELECT\n    player_id,\n    player_name,\n    AVG(fg_pct::numeric) AS avg_fg_pct,  \n    AVG(fg3_pct::numeric) AS avg_fg3_pct,\n    AVG(reb::numeric) AS avg_reb,\n    AVG(tov::numeric) AS avg_tov,\n    AVG(stl::numeric) AS avg_stl,\n    AVG(blk::numeric) AS avg_blk,\n    AVG(plus_minus::numeric) AS avg_plus_minus\n    FROM \"nba\".\"silver\".\"player_stats\" \n\tgroup by player_id, player_name\n    ) AS pgs\n    ON p.player_id = pgs.player_id\n    LEFT JOIN \"nba\".\"silver\".\"free_agents\"  AS fa ON p.player_id = fa.player_id\n    LEFT JOIN (Select player_id from \"nba\".\"silver\".\"injuries\"  group by player_id) \n\tAS i ON p.player_id = i.player_id\n    LEFT JOIN (select player_id,max(salary_usd) as salary_usd from \"nba\".\"silver\".\"salaries\" group by player_id) AS s ON p.player_id = s.player_id\n),\n\ntop_targets AS (\n    SELECT\n        'Porcentaje de tiro de campo' AS weakness_type,\n        player_id,\n        is_free_agent,\n        is_injured,\n        player_name,\n        avg_fg_pct AS metric_value,\n        position,\n        salary,\n        'Contratar un tirador de \u00e9lite para mejorar la eficiencia del tiro.' AS reason\n    FROM ranked_free_agents\n    WHERE rank_fg <= 5 AND position IN ('G', 'F')\n    \n    UNION ALL\n    SELECT\n        'Porcentaje de tres' AS weakness_type,\n        player_id,\n        is_free_agent,\n        is_injured,\n        player_name,\n        avg_fg3_pct AS metric_value,\n        position,\n        salary,\n        'Contratar un tirador de \u00e9lite para abrir el campo.' AS reason\n    FROM ranked_free_agents\n    WHERE rank_fg3 <= 5 AND position IN ('G', 'G-F', 'F')\n    UNION ALL\n    SELECT\n        'Rebotes' AS weakness_type,\n        player_id,\n        is_free_agent,\n        is_injured,\n        player_name,\n        avg_reb AS metric_value,\n        position,\n        salary,\n        'Adquirir un rebotador consistente para controlar los tableros.' AS reason\n    FROM ranked_free_agents\n    WHERE rank_reb <= 5 AND position IN ('F', 'F-C', 'C')\n    UNION ALL\n    SELECT\n        'P\u00e9rdidas de bal\u00f3n' AS weakness_type,\n        player_id,\n        is_free_agent,\n        is_injured,\n        player_name,\n        avg_tov AS metric_value,\n        position,\n        salary,\n        'Incorporar un base que reduzca las p\u00e9rdidas de bal\u00f3n.' AS reason\n    FROM ranked_free_agents\n    WHERE rank_tov <= 5 AND position IN ('G')\n    UNION ALL\n    SELECT\n        'Robos' AS weakness_type,\n        player_id,\n        is_free_agent,\n        is_injured,\n        player_name,\n        avg_stl AS metric_value,\n        position,\n        salary,\n        'Firmar un defensor perimetral para mejorar la defensa en el robo de balones.' AS reason\n    FROM ranked_free_agents\n    WHERE rank_stl <= 5 AND position IN ('G', 'F')\n    UNION ALL\n    SELECT\n        'Bloqueos' AS weakness_type,\n        player_id,\n        is_free_agent,\n        is_injured,\n        player_name,\n        avg_blk AS metric_value,\n        position,\n        salary,\n        'Contratar un defensor interior para proteger el aro y aumentar los bloqueos.' AS reason\n    FROM ranked_free_agents\n    WHERE rank_blk <= 5 AND position IN ('F-C', 'C')\n    UNION ALL\n    SELECT\n        'Diferencial Puntos' AS weakness_type,\n        player_id,\n        is_free_agent,\n        is_injured,\n        player_name,\n        avg_plus_minus AS metric_value,\n        position,\n        salary,\n        'Contratar a un jugador con impacto positivo en el diferencial de puntos.' AS reason\n    FROM ranked_free_agents\n    WHERE rank_plus_minus <= 5\n     \n)\n\nSELECT\n    swu.season2,\n    tt.weakness_type,\n    tt.player_name AS recommended_player,\n    tt.position,\n    tt.metric_value,\n    tt.salary,\n    tt.reason,\n    tt.player_id,\n    tt.is_free_agent,\n    tt.is_injured\nFROM spurs_weaknesses_unpivoted swu\nJOIN top_targets tt ON swu.weakness_type = tt.weakness_type\nORDER BY swu.season2, tt.weakness_type, tt.metric_value DESC", "relation_name": "\"nba\".\"gold\".\"players_recommendations\""}], "elapsed_time": 1.507873296737671, "args": {"partial_parse": true, "select": [], "enable_legacy_logger": false, "printer_width": 80, "warn_error_options": {"include": [], "exclude": []}, "log_level_file": "debug", "quiet": false, "cache_selected_only": false, "send_anonymous_usage_stats": true, "write_json": true, "indirect_selection": "eager", "favor_state": false, "which": "run", "log_file_max_bytes": 10485760, "log_format": "default", "invocation_command": "dbt run", "macro_debugging": false, "log_path": "/usr/local/airflow/dbt/logs", "show_resource_report": false, "vars": {}, "populate_cache": true, "log_level": "info", "introspect": true, "partial_parse_file_diff": true, "static_parser": true, "profiles_dir": "/usr/local/airflow/dbt", "use_colors_file": true, "log_format_file": "debug", "use_colors": true, "defer": false, "strict_mode": false, "print": true, "project_dir": "/usr/local/airflow/dbt", "exclude": [], "version_check": true}}